# run.py
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞). –ó–¥–µ—Å—å –¢–û–õ–¨–ö–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ —Å—Ç–∞—Ä—Ç polling.

import logging
import asyncio
from aiogram import executor
from libs import dp

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers import main_handlers, chat_handlers

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
try:
    from handlers import purchase_handlers
except Exception:
    purchase_handlers = None

try:
    from handlers import admin_handlers
except Exception:
    admin_handlers = None

# üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è)
try:
    from services.reminder import reminder_loop
except Exception as e:
    reminder_loop = None
    print(f"‚ö†Ô∏è Reminder loop –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω: {e}")


def register_all_handlers(dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ñ—É–Ω–∫—Ü–∏—é register(dp)."""
    modules = (main_handlers, chat_handlers, purchase_handlers, admin_handlers)
    for mod in modules:
        if mod is None:
            continue
        if hasattr(mod, "register"):
            try:
                mod.register(dispatcher)
                logging.info(f"‚úÖ Registered handlers from {mod.__name__}")
            except Exception as e:
                logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers –∏–∑ {mod.__name__}: {e}")
        else:
            logging.info(f"‚ÑπÔ∏è –ú–æ–¥—É–ª—å {mod.__name__} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç register(dp) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤...")
    register_all_handlers(dp)

    # ‚úÖ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if reminder_loop:
        loop = asyncio.get_event_loop()
        loop.create_task(reminder_loop())
        logging.info("üïí Reminder loop –∑–∞–ø—É—â–µ–Ω")

    logging.info("ü§ñ Start polling...")
    executor.start_polling(dp, skip_updates=True)
