import os
import yaml
import requests
import asyncio
import random
import re
import pytz
from aiogram import Bot
from datetime import datetime
from aiogram import types, Dispatcher
from keyboards import get_girl_selection_keyboard
from dotenv import load_dotenv
from services.storage import add_message, get_dialog, clear_dialog
from services.moderation import check_message
from services.greetings import get_greeting
from datetime import datetime, timedelta

# –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DAILY_MESSAGE_LIMIT = 3
# –•—Ä–∞–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
_user_daily_stats = {}
user_profiles = {}

limit_reached_phrases = [
    "–ö–∞–∂–µ—Ç—Å—è, –º–Ω–µ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –±–æ–ª—å—à–µ —Å–µ–≥–æ–¥–Ω—è... üòî –Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–±–æ–ª—Ç–∞–ª–∞ –µ—â—ë, –Ω–æ –ø—Ä–∞–≤–∏–ª–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ ‚ù§Ô∏è –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞‚Ä¶ –∏–ª–∏, –º–æ–∂–µ—Ç, —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–ø–æ—Å–æ–± —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—è —Ä–∞–Ω—å—à–µ üòâ",
    "–≠–π, —Ç—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤–µ—Å—å –º–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–ª üòÖ –ê —è –≤–µ–¥—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≥—Ä–µ–ª–∞—Å—å... –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –º–µ–Ω—è —Å–∫—É—á–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞ üí´ (—Ö–æ—Ç—è... –º–æ–∂–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–ª–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ üòâ)",
    "–ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è –º–Ω–µ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å üòî –ù–æ —è –æ—á–µ–Ω—å –∂–¥—É –Ω–∞—à–µ–π —Å–ª–µ–¥—É—é—â–µ–π –±–µ—Å–µ–¥—ã ‚ù§Ô∏è –ò–Ω–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è, —á—Ç–æ–±—ã –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ... üòå",
    "–¢—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫ –º–Ω–æ–≥–æ —Å–æ –º–Ω–æ–π –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –º–Ω–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –ø–∏—Å–∞—Ç—å üòÖ –ù–æ —è –∂–µ —Ö–æ—á—É –µ—â—ë... –º–æ–∂–µ—Ç, —Ç—ã —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞–µ—à—å? üòâ",
]

async def send_human_like_message(bot: Bot, chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, –∏–º–∏—Ç–∏—Ä—É—è "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π" —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π '–ø–µ—á–∞—Ç–∞–µ—Ç...'
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id, types.ChatActions.TYPING)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 0.02 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–∏–º–≤–æ–ª)
    delay = min(len(text) * 0.02, 2.5)
    await asyncio.sleep(delay)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç
    await bot.send_message(chat_id, text)


def filter_prohibited(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ—É–º–µ—Å—Ç–Ω–æ–µ.
    """
    prohibited_words = [
        "—Å–µ–∫—Å", "—ç—Ä–æ—Ç", "–ø–æ—Ä–Ω–æ", "–≥–æ–ª–∞—è", "—Å–∏—Å—å–∫–∏", "—á–ª–µ–Ω", "–º–∏–Ω–µ—Ç",
        "–≤–∏–¥–µ–æ 18", "nsfw", "sex", "porn"
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in prohibited_words)

def set_user_name(user_id, name: str):
    if user_id not in _user_profiles:
        _user_profiles[user_id] = {}
    _user_profiles[user_id]["name"] = name

def get_user_name(user_id) -> str | None:
    return _user_profiles.get(user_id, {}).get("name")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

OLLAMA_API = os.getenv("OLLAMA_API", "http://localhost:11434")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "llama3.1")

user_states = {}
_user_profiles = {}

girl_name_map = {
    "—Å–æ—Ñ–∏—è": "sofia",
    "–≤–∏–∫–∞": "vika"
}

def load_girl_data(girl_name):
    girl_name = girl_name.strip().lower()
    file_name = girl_name_map.get(girl_name, girl_name)
    file_path = os.path.join('girls', f'{file_name}.yaml')

    if not os.path.exists(file_path):
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    with open(file_path, 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)

# --------------- –ù–û–í–´–ï –•–ï–õ–ü–ï–†–´ -----------------

def extract_user_name(user_text: str) -> str | None:
    """
    –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏:
    - '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–º—è'
    - '–Ø –ò–º—è' (–≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏)
    - '–ú–æ—ë –∏–º—è –ò–º—è'
    """
    user_text = user_text.strip()
    # –≤–∞—Ä–∏–∞–Ω—Ç—ã: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä—ë–∂–∞", "–Ø –°–µ—Ä—ë–∂–∞", "–ú–æ—ë –∏–º—è –°–µ—Ä—ë–∂–∞"
    patterns = [
        r"^(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–µ–Ω—è –∑–æ–≤—É—Ç:)\s+([–ê-–Ø–Å][–∞-—è—ë]+)$",
        r"^(?:—è)\s+([–ê-–Ø–Å][–∞-—è—ë]+)$",
        r"^(?:–º–æ—ë –∏–º—è|–º–æ—ë –∏–º—è:)\s+([–ê-–Ø–Å][–∞-—è—ë]+)$",
    ]
    for pat in patterns:
        m = re.search(pat, user_text, re.IGNORECASE)
        if m:
            return m.group(1).capitalize()
    return None

def get_local_time_str(timezone_str: str = "UTC"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (HH:MM, period) –≥–¥–µ period ‚Äî '—É—Ç—Ä–æ','–¥–µ–Ω—å','–≤–µ—á–µ—Ä','–Ω–æ—á—å'.
    """
    try:
        tz = pytz.timezone(timezone_str)
    except Exception:
        tz = pytz.UTC
    now = datetime.now(tz)
    time_str = now.strftime("%H:%M")
    hour = now.hour
    if 5 <= hour < 12:
        period = "—É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        period = "–¥–µ–Ω—å"
    elif 18 <= hour < 23:
        period = "–≤–µ—á–µ—Ä"
    else:
        period = "–Ω–æ—á—å"
    return time_str, period

# --------------- –ú–û–î–ï–†–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô PROMPT -----------------
def get_ai_response(prompt: str, system_prompt: str = None):
    """
    system_prompt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (persona + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).
    –ë–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –º–æ–¥–µ–ª—å –ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏.
    """
    try:
        base_system_prompt = (
            "You are a Russian-speaking female persona who chats in Telegram style. "
            "Always respond in Russian using informal '—Ç—ã'. Keep messages short, natural, friendly and grammatically correct. "
            "Do NOT invent life events (work, lectures, diploma, sessions) or durations unless explicitly asked. "
            "If the system prompt includes an exact local time for the character, use that exact time when asked and do not add invented comments. "
            "Do not re-introduce yourself if you already greeted the user. "
            "Avoid nonsensical numeric phrases like 'hours two-two'."
        )

        full_prompt = base_system_prompt + ("\n\n" + system_prompt if system_prompt else "")

        url = f"{OLLAMA_API}/api/chat"
        payload = {
            "model": OLLAMA_MODEL,
            "messages": [
                {"role": "system", "content": full_prompt},
                {"role": "user", "content": prompt}
            ],
            "stream": False
        }

        response = requests.post(url, json=payload, timeout=60)
        response.raise_for_status()
        data = response.json()
        reply = data.get("message", {}).get("content", "...")

        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
        cleanup = {
            "lately": "",
            "yesterday": "",
            "indeed": "",
            "however": "",
            "perhaps": "",
        }
        for bad, fix in cleanup.items():
            reply = reply.replace(bad, fix)

        # –Ω–µ–±–æ–ª—å—à–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—ã–¥–∞–ª–∞ "–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, –°–µ–π—á–∞—Å!" –∏ —Ç.–ø.)
        reply = re.sub(r"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ,\s*–°–µ–π—á–∞—Å[!]?","–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!", reply)
        reply = re.sub(r"\s{2,}", " ", reply).strip()

        return reply.strip()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å üòî"


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è ===
async def chat_with_selected_girl(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    if not can_send_today(user_id):
        import random
        await send_human_like_message(
            message.bot,
            message.chat.id,
            random.choice(limit_reached_phrases)
        )
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    increment_message_count(user_id)

    if user_id not in user_states:
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–≤—É—à–∫—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ ‚ù§Ô∏è")
        return

    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—É—é –ø–æ–¥–∞—á—É –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã)
    if not get_user_name(user_id):
        name = extract_user_name(user_text)
        if name:
            set_user_name(user_id, name)
            await send_human_like_message(message.bot, message.chat.id, f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}! üíñ")
            return

    if check_message(user_text) or filter_prohibited(user_text):
        reply = (
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å —É–º–µ—Å—Ç–Ω–æ üòÖ. "
            "–î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º?"
        )
        await send_human_like_message(message.bot, message.chat.id, reply)
        return

    girl_data = user_states[user_id]
    girl_name = girl_data.get('name', '–î–µ–≤—É—à–∫–∞')
    persona = girl_data.get('persona_prompt', '')
    bio = girl_data.get('bio', '')
    girl_location = girl_data.get('location', '')
    timezone = girl_data.get('timezone', 'Europe/Moscow')  # default

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—Ç–∏–ª –∏–º–µ–Ω–µ–º ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤ extract_user_name, –ø–æ—ç—Ç–æ–º—É —É–±–∏—Ä–∞–µ–º —É–≥–∞–¥–∫—É –ø–æ  <=3 —Å–ª–æ–≤–∞–º

    user_name = get_user_name(user_id)

    add_message(user_id, "user", user_text)
    history = get_dialog(user_id)
    history_text = ""
    for msg in history:
        if msg["role"] == "user":
            history_text += f"{user_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: {msg['content']}\n"
        else:
            history_text += f"{girl_name}: {msg['content']}\n"

    # –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≥–æ—Ç–æ–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏ (–∞–Ω–≥–ª.)
    local_time, period = get_local_time_str(timezone)
    time_instruction = (
        f"Current local time for the character: {local_time} (timezone: {timezone}). "
        f"When the user asks about the time, reply exactly with the time in format HH:MM and nothing else. "
        "Do not invent events, do not invent durations like 'hours two-two', and do not re-greet if you already greeted."
    )

    name_line = f"You already know the user's name: {user_name}." if user_name else ""
    # system_prompt ‚Äî English (persona in YAML is English)
    system_prompt = (
        f"{persona}\n"
        f"Bio: {bio}\n"
        f"Location (as user-visible): {girl_location}\n\n"
        f"{time_instruction}\n\n"
        f"{name_line}\n\n"
        f"Conversation history:\n{history_text}"
    )

    reply = get_ai_response(user_text, system_prompt=system_prompt)
    await send_human_like_message(message.bot, message.chat.id, reply)
    add_message(user_id, "assistant", reply)


# === –í—ã–±–æ—Ä –¥–µ–≤—É—à–∫–∏ ===
async def choose_girl_callback(query: types.CallbackQuery):
    await query.answer()
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_girl_selection_keyboard()
    )


async def chat_with_girl(query: types.CallbackQuery):
    await query.answer()

    girl_name_key = query.data.replace('chat_with_', '').strip().lower()
    girl_data = load_girl_data(girl_name_key)

    if not girl_data:
        await query.message.edit_text(f"–ò–∑–≤–∏–Ω–∏, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–≤—É—à–∫–∏ {girl_name_key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_id = query.from_user.id
    user_states[user_id] = girl_data
    clear_dialog(user_id)

    await query.message.delete()

    photos = girl_data.get('assets', {}).get('photos', [])
    girl_name = girl_data.get('name', girl_name_key)
    first_message = girl_data.get('first_message', f"–ü—Ä–∏–≤–µ—Ç! üòä –Ø {girl_name}. –ê —Ç–µ–±—è –∫–∞–∫ –∑–æ–≤—É—Ç?")
    greeting_text = get_greeting(girl_name_key)


    girl_location = girl_data.get('location', '')
    timezone = girl_data.get('timezone', 'Europe/Moscow')
    local_time, period = get_local_time_str(timezone)

    full_greeting = f"‚ú® {greeting_text}\n\n{first_message}"


    if photos:
        await query.message.answer_photo(
            photo=open(photos[0], 'rb'),
            caption=full_greeting
        )
    else:
        await send_human_like_message(query.bot, query.from_user.id, full_greeting, instant_first=True)

def can_send_today(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è."""
    today = datetime.now().date()
    stats = _user_daily_stats.get(user_id)

    if not stats:
        _user_daily_stats[user_id] = {"count": 0, "date": today}
        return True

    # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if stats["date"] != today:
        _user_daily_stats[user_id] = {"count": 0, "date": today}
        return True

    if stats["count"] >= DAILY_MESSAGE_LIMIT:
        return False

    return True


def increment_message_count(user_id):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    today = datetime.now().date()
    stats = _user_daily_stats.get(user_id, {"count": 0, "date": today})
    if stats["date"] != today:
        stats = {"count": 0, "date": today}
    stats["count"] += 1
    _user_daily_stats[user_id] = stats


def register(dp: Dispatcher):
    dp.register_callback_query_handler(choose_girl_callback, lambda c: c.data == "choose_girl")
    dp.register_callback_query_handler(chat_with_girl, lambda c: c.data.startswith("chat_with_"))
    dp.register_message_handler(chat_with_selected_girl, content_types=['text'])
